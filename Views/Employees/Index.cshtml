@model IPagedList<EmployeeDapper.Models.Employee>

@{
    ViewBag.Title = "Index";
}
@using PagedList;
@using PagedList.Mvc;

<h2>Employees</h2>
<div id="full" style="background-color: #ffffff;">
    <div class="row pb-3">
        <div class="col-md-6">
            <form method="get" action="@Url.Action("Index")">
                <input name="Search" type="search" placeholder="Search" value="@ViewBag.Request.Search" />
                <button class="btn btn-primary">Search</button>
            </form>
        </div>
        <div class="col-md-6 text-end">
            @Html.ActionLink("Create New", "Create", null,
            new { @class = "btn btn-primary" })
            <button class="btn btn-primary" type="submit" value="print" onclick="window.print()">Print</button>
            @*<a style="float:left;" href="@Url.Action("ExportToExcel","Employee")">ExportToExcel</a>*@
            @*<button class="btn btn-primary">Export to Excel</button>*@
            @Html.ActionLink("ExportToExcel", "ExportToExcel", null,
            new { @class = "btn btn-primary" })
            <button class="btn btn-primary" onclick="openFullscreen()" id="toggle-fullscreen">Open Fullscreen</button>
            @*<form method="get" action="@Url.Action("Index")" ">
                    <button class="btn btn-primary">Refresh</button>
                </form>                                       ------Alternate code for refresh*@
            @Html.ActionLink("Refresh", "Index", null,
            new { @class = "btn btn-primary" })
            @*<input type="submit" id="RefreshPage" class="btn btn-primary" value="Refresh" name="Command" onclick="RefreshPage()">*@
        </div>

    </div>
    @*<div class="form-group pull-right>
            @using (Html.BeginForm("Export", "Employees", FormMethod.Post))
                    {
                        <input type="submit" value="Export" class="btn btn-success"/>
                    }
        </div>*@
    <div id="fullT" style="background-color: #ffffff;">
        <table class="table" id="refresh">
            <tr>
                <th>
                    @Html.ActionLink("Name", "Index"
                         , new EmployeeDapper.Models.RequestModel
                         {
                             Search = ViewBag.Request.Search,
                             OrderBy = "name",
                             IsDescending = (ViewBag.Request.OrderBy == "name"
                                             &&
                                             ViewBag.Request.IsDescending == false) ? true : false
                         }, null)
                </th>
                <th>
                    @Html.ActionLink("City", "Index"
                         , new EmployeeDapper.Models.RequestModel
                         {
                             Search = ViewBag.Request.Search,
                             OrderBy = "city",
                             IsDescending = (ViewBag.Request.OrderBy == "city"
                                             &&
                                             ViewBag.Request.IsDescending == false) ? true : false
                         }, null)
                </th>


                <th>
                    @Html.ActionLink("Address", "Index"
                        , new EmployeeDapper.Models.RequestModel
                        {
                            Search = ViewBag.Request.Search,
                            OrderBy = "address",
                            IsDescending = (ViewBag.Request.OrderBy == "address"
                                            &&
                                            ViewBag.Request.IsDescending == false) ? true : false
                        }, null)
                </th>


                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.City)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Address)
                    </td>


                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                        @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                    </td>
                </tr>
            }
        </table>

        @*<div class="row">
            <div class="col-md-9">
                <a href="">&laquo; First</a>
                <a href="">&lt; Previous</a>
                Showing 1 out of 5 pages
                <a href="">&gt; Next</a>
                <a href="">&raquo; Last</a>

                [Total 5000 records]
            </div>
            <div class="col text-end">
                Page Size: 20 30 50 All
            </div>
        </div>*@


    </div> @*id="fullT" div*@
</div> @*id="full" div*@
@*<div>
    <a href="@Url.Action("Index", "Employees", new { i, search = Request.QueryString["serach"] }))">10</a>
</div>*@
@Html.PagedListPager(Model, i => Url.Action("Index", "Employees", new { i, search = Request.QueryString["serach"] }),
 new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded, DisplayPageCountAndCurrentLocation = true, DisplayItemSliceAndTotal = true })

@*<script>document.getElementById('fullscreen-div').addEventListener('fullscreenchange', (event) => {
            // document.fullscreenElement will point to the element that
            // is in fullscreen mode if there is one. If not, the value
            // of the property is null.
            if (document.fullscreenElement) {
                console.log(`Element: ${document.fullscreenElement.id} entered fullscreen mode.`);
            } else {
                console.log('Leaving full-screen mode.');
            }
        });

        document.getElementById('toggle-fullscreen').addEventListener('click', (event) => {
            if (document.fullscreenElement) {
                // exitFullscreen is only available on the Document object.
                document.exitFullscreen();
            } else {
                document.getElementById('fullscreen-div').requestFullscreen();
            }
        });
    </script>

*@
@*Full screen js*@
<script>
    var elem = document.getElementById("fullT");
    function openFullscreen() {
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        } else if (elem.webkitRequestFullscreen) { /* Safari */
            elem.webkitRequestFullscreen();
        } else if (elem.msRequestFullscreen) { /* IE11 */
            elem.msRequestFullscreen();
        }
    }
</script>
